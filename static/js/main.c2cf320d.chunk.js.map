{"version":3,"sources":["common/components/draggable/draggable.component.tsx","common/components/page-not-found/page-not-found.component.tsx","common/types/survey-status.type.ts","common/components/drop-target/drop-target.component.tsx","builder/components/drag-drop-builder.component.tsx","common/mappers/survey-status.mapper.ts","state/surveys/surveys.actions.ts","common/components/status-tag/status-tag.component.tsx","common/types/key.type.ts","state/surveys/surveys.selectors.ts","state/utils/dispatch.util.ts","containers/builder/builder.container.tsx","common/components/color-picker/color-picker.component.tsx","common/components/edit-survey-details-modal/edit-survey-details-modal.component.tsx","containers/detail/detail.container.tsx","common/utils/date.utils.ts","common/utils/string.utils.ts","common/components/survey-table/survey-table.component.tsx","containers/homepage/homepage.container.tsx","common/components/editable-text/editable-text.component.tsx","containers/sandbox/sandbox.container.tsx","layout/admin/admin-layout.container.tsx","app/app.container.tsx","app/service-worker.ts","common/types/environment.type.ts","common/mappers/environment.mapper.ts","state/state.constants.ts","state/surveys/surveys.reducer.ts","state/index.ts","index.tsx"],"names":["ItemTypes","PageNotFound","react_default","a","createElement","className","Link","to","SurveyStatus","DraggableComponent","_this$props","this","props","name","isDragging","connectDragSource","classNames","cc","draggable","dragging","React","Component","Draggable","DragSource","SurveyItem","beginDrag","_ref","endDrag","_ref2","monitor","onDrop","getDropResult","connector","dragSource","DropTargetComponent","canDrop","isOver","connectDropTarget","isActive","drop-target","hover","DropTarget","Target","drop","connect","dropTarget","DragDropBuilder","_Component","_getPrototypeOf2","_this","Object","classCallCheck","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","choice","onAddSurveyItem","id","uuid","description","inherits","createClass","key","value","surveyItems","card","map","item","SurveysActionType","mapStatusToColor","status","Published","InProgress","Cancelled","Warning","mapStatusToIcon","STATUS_TOOLTIPS","_STATUS_TOOLTIPS","defineProperty","StatusTag","_ref$size","size","_ref$extended","extended","_ref$className","tooltip","placement","title","tag","color","icon","type","style","paddingLeft","Key","ChangeSurveysFilterAction","payload","UpdateSurveyAction","AddSurveyItemAction","selectAllSurveys","createSelector","state","surveysState","surveys","selectCurrentSurvey","match","params","surveyid","find","survey","mappedDispatchProps","dispatchProps","dispatch","entries","reduce","acc","slicedToArray","propName","action","objectSpread","mapDispatchToProps","surveyId","surveyItem","BuilderContainer","_dec","_class","Fragment","status_tag_component_StatusTag","drag_drop_builder_component_DragDropBuilder","items","defaultColors","ColorPicker","displayColorPicker","handleClick","setState","handleClose","handleChange","hex","es_button","onClick","position","top","right","bottom","left","background","zIndex","lib","colors","onChange","EditSurveyDetailsModalComponent","getErrors","_this$props$form","form","isFieldTouched","getFieldError","getValidateStatus","_this$props$form2","handleSubmit","event","preventDefault","validateFields","errors","values","onSubmit","onCancel","getFieldDecorator","modal","visible","footer","es_form","FormItem_default","label","validateStatus","help","rules","required","message","input","placeholder","color_picker_component_ColorPicker","EditSurveyDetailsModal","create","mapPropsToFields","_props$values","createFormField","onUpdateSurvey","changes","DetailContainer","detail_container_dec","detail_container_class","isEditModalVisible","toggleEditModal","prevState","updateSurvey","margin","shape","marginRight","tooltipPlacement","extra","float","es_Redirect","epochFromNow","epoch","moment","fromNow","matchesQuery","field","query","toLowerCase","includes","SurveyTable","matchesSearchQuery","onChangeFilter","e","target","_this2","filteredItems","filter","columns","dataIndex","align","render","text","row","justify","col","table","dataSource","rowKey","bordered","onRow","onRowSelected","span","group_default","defaultValue","radioButton_default","Search_default","enterButton","allowClear","HomepageContainer","homepage_container_dec","homepage_container_class","history","push","filteredSurveys","survey_table_component_SurveyTable","EditableText","hasFocus","ref","createRef","onBlur","current","blur","onFocus","focus","onKeyDown","Enter","innerHTML","trim","contentEditable","suppressContentEditableWarning","SandboxContainer","onTitleChange","console","log","display","flexDirection","editable_text_component_EditableText","Header","Footer","Content","AdminLayoutContainer","layout","children","App","admin_layout_container_AdminLayoutContainer","Switch","Route","exact","path","component","Redirect","AppContainer","DragDropContext","HTML5Backend","Boolean","window","location","hostname","Environment","exampleDescription","DEFAULT_STATE","_DEFAULT_STATE","Production","createdAt","modifiedAt","questionCount","Development","initialSurveysState","surveysReducer","undefined","toConsumableArray","persistConfig","storage","stateReconciler","autoMergeLevel1","createBrowserHistory","basename","environment","mapStringToEnvironment","process","combinedReducers","persistReducer","combineReducers","router","connectRouter","store","createStore","composeWithDevTools","persistor","persistStore","ReactDOM","es","integration_react","loading","spin","esm","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c2cf320d.chunk.js","sourcesContent":["import cc from 'classcat';\nimport React from 'react';\nimport { ConnectDragSource, DragSource, DragSourceConnector, DragSourceMonitor } from 'react-dnd';\nimport './draggable.component.less';\n\nexport enum ItemTypes {\n    SurveyItem = 'Survey Item',\n}\n\nexport interface DraggableComponentProps {\n    name: string;\n    onDrop: any;\n}\nexport interface DragProps {\n    isDragging?: boolean; // Optional because this is provided by react-dnd\n    connectDragSource?: ConnectDragSource;\n}\n\nclass DraggableComponent extends React.Component<DraggableComponentProps & DragProps> {\n    render() {\n        const { name, isDragging, connectDragSource } = this.props;\n\n        const classNames = cc({\n            draggable: true,\n            dragging: isDragging,\n        });\n\n        // @ts-ignore\n        return connectDragSource(<div className={classNames}>{name}</div>);\n    }\n}\nexport const Draggable = DragSource<DraggableComponentProps>(\n    ItemTypes.SurveyItem,\n    {\n        beginDrag: ({ name }: DraggableComponentProps) => ({ name }),\n\n        endDrag: ({ onDrop, name }: DraggableComponentProps, monitor: DragSourceMonitor) => {\n            const dropResult = monitor.getDropResult();\n            if (dropResult) {\n                onDrop(name);\n            }\n        },\n    },\n    (connector: DragSourceConnector, monitor: DragSourceMonitor) => ({\n        connectDragSource: connector.dragSource(),\n        isDragging: monitor.isDragging(),\n    }),\n)(DraggableComponent);\n","import React, { SFC } from 'react';\nimport { Link } from 'react-router-dom';\nimport './page-not-found.component.less';\n\nexport const PageNotFound: SFC = (): JSX.Element => (\n    <div className=\"page-not-found__container\">\n        <h1 className=\"page-not-found__title\">404</h1>\n        <p>This is not the page you're looking for.</p>\n\n        <Link to=\"/\">Go Home instead</Link>\n    </div>\n);\n","export enum SurveyStatus {\n    Published = 'Published',\n    InProgress = 'In Progress',\n    Cancelled = 'Cancelled',\n    Warning = 'Warning',\n}\n","import cc from 'classcat';\nimport React from 'react';\nimport { ConnectDropTarget, DropTarget as Target } from 'react-dnd';\nimport { ItemTypes } from '../draggable/draggable.component';\nimport './drop-target.component.less';\n\nexport interface DropTargetComponentProps {\n    connectDropTarget: ConnectDropTarget;\n    canDrop: boolean;\n    isOver: boolean;\n}\nclass DropTargetComponent extends React.Component<DropTargetComponentProps> {\n    render() {\n        const { canDrop, isOver, connectDropTarget } = this.props;\n        const isActive = canDrop && isOver;\n\n        const classNames = cc({\n            'drop-target': true,\n            dragging: canDrop,\n            hover: isActive,\n        });\n\n        return connectDropTarget(\n            <div className={classNames}>{isActive ? 'Add survey element' : 'Drag an element here'}</div>,\n        );\n    }\n}\nexport const DropTarget = Target(\n    ItemTypes.SurveyItem,\n    { drop: () => ({ name: 'DropTarget' }) },\n    (connect, monitor) => ({\n        connectDropTarget: connect.dropTarget(),\n        isOver: monitor.isOver(),\n        canDrop: monitor.canDrop(),\n    }),\n)(DropTargetComponent);\n","import { Card } from 'antd';\nimport React, { Component } from 'react';\nimport uuid from 'uuid/v4';\nimport { Draggable } from '../../common/components/draggable/draggable.component';\nimport { DropTarget } from '../../common/components/drop-target/drop-target.component';\nimport { SurveyItem } from '../../common/types/survey-item.type';\nimport './drag-drop-builder.component.less';\n\nexport interface DragDropBuilderProps {\n    surveyItems: SurveyItem[];\n    onAddSurveyItem: (item: SurveyItem) => void;\n}\n\nexport class DragDropBuilder extends Component<DragDropBuilderProps> {\n    render() {\n        const { surveyItems } = this.props;\n\n        return (\n            <div className=\"builder__container\">\n                <Card className=\"survey\">\n                    <h2>Survey</h2>\n\n                    {surveyItems.map(item => (\n                        <div key={item.id}>{item.description}</div>\n                    ))}\n                    <DropTarget />\n                </Card>\n                <Card className=\"elements\">\n                    <h2>Survey Elements</h2>\n                    <Draggable onDrop={this.onDrop} name=\"Single Choice\" />\n                    <Draggable onDrop={this.onDrop} name=\"Multiple Choice\" />\n                    <Draggable onDrop={this.onDrop} name=\"Open Question\" />\n                </Card>\n            </div>\n        );\n    }\n\n    onDrop = (choice: string) => {\n        this.props.onAddSurveyItem({ id: uuid(), description: choice });\n    };\n}\n","import { SurveyStatus } from '../types/survey-status.type';\n\n// See: http://beta.ant.design/components/tag/\nexport const mapStatusToColor = (status: SurveyStatus): 'green' | 'yellow' | 'red' | 'volcano' => {\n    switch (status) {\n        case SurveyStatus.Published:\n            return 'green';\n        case SurveyStatus.InProgress:\n            return 'yellow';\n        case SurveyStatus.Cancelled:\n            return 'red';\n        case SurveyStatus.Warning:\n            return 'volcano';\n    }\n};\n\n// See: https://ant.design/components/icon/\nexport const mapStatusToIcon = (status: SurveyStatus): 'check' | 'clock-circle' | 'stop' | 'warning' => {\n    switch (status) {\n        case SurveyStatus.Published:\n            return 'check';\n        case SurveyStatus.InProgress:\n            return 'clock-circle';\n        case SurveyStatus.Cancelled:\n            return 'stop';\n        case SurveyStatus.Warning:\n            return 'warning';\n    }\n};\n","import { Action } from 'redux';\nimport { SurveyItem } from '../../common/types/survey-item.type';\nimport { Survey } from '../../common/types/survey.type';\n\nexport enum SurveysActionType {\n    ChangeSurveysFilterAction = 'Surveys: Change Surveys Filter',\n    UpdateSurveyAction = 'Surveys: Update Survey',\n    AddSurveyItemAction = 'Surveys: Add Survey Item',\n}\n\nexport class ChangeSurveysFilterAction implements Action {\n    readonly type = SurveysActionType.ChangeSurveysFilterAction;\n    constructor(public payload: { filter: string }) {}\n}\n\nexport class UpdateSurveyAction implements Action {\n    readonly type = SurveysActionType.UpdateSurveyAction;\n    constructor(public payload: { surveyId: string; changes: Partial<Survey> }) {}\n}\n\nexport class AddSurveyItemAction implements Action {\n    readonly type = SurveysActionType.AddSurveyItemAction;\n    constructor(public payload: { surveyId: string; surveyItem: SurveyItem }) {}\n}\n\nexport type SurveysAction = ChangeSurveysFilterAction | UpdateSurveyAction | AddSurveyItemAction;\n","import { Icon, Tag, Tooltip } from 'antd';\nimport React, { SFC } from 'react';\nimport { mapStatusToColor, mapStatusToIcon } from '../../mappers/survey-status.mapper';\nimport { SurveyStatus } from '../../types/survey-status.type';\nimport './status-tag.component.less';\n\nexport type StatusTagSize = 'small' | 'medium' | 'large';\n\nexport const STATUS_TOOLTIPS: { [key in SurveyStatus]: string } = {\n    [SurveyStatus.Published]: 'This survey has been published',\n    [SurveyStatus.InProgress]: 'This survey is a draft',\n    [SurveyStatus.Cancelled]: 'This survey was cancelled',\n    [SurveyStatus.Warning]: 'This survey needs reviewing',\n};\n\nexport interface StatusTagProps {\n    status: SurveyStatus;\n    extended?: boolean;\n    size?: StatusTagSize;\n    className?: string;\n    tooltipPlacement?: 'top' | 'right' | 'left' | 'bottom';\n}\n\nexport const StatusTag: SFC<StatusTagProps> = ({\n    status,\n    size = 'medium',\n    extended = false,\n    className = '',\n}: StatusTagProps): JSX.Element => (\n    <Tooltip placement=\"topLeft\" title={STATUS_TOOLTIPS[status]}>\n        <Tag className={`status-tag--${size} ${className}`} color={mapStatusToColor(status)}>\n            <Icon type={mapStatusToIcon(status)} />\n            {extended && <span style={{ paddingLeft: '5px' }}>{status}</span>}\n        </Tag>\n    </Tooltip>\n);\n","export enum Key {\n    Enter = 'Enter',\n    Escape = 'Escape',\n}\n","import { RouteComponentProps } from 'react-router';\nimport { createSelector } from 'reselect';\nimport { AppState } from '../index';\n\nconst surveysSelector = (state: AppState) => state.surveysState;\nconst getCurrentSurveyId = (state: AppState, props: RouteComponentProps<{ surveyid: string }>) => {\n    return props.match.params.surveyid;\n};\n\nexport const selectAllSurveys = createSelector(\n    surveysSelector,\n    surveysState => surveysState.surveys,\n);\n\nexport const selectCurrentSurvey = createSelector(\n    [getCurrentSurveyId, selectAllSurveys],\n    (id, surveys) => surveys.find(survey => survey.id === id),\n);\n","import { Action, Dispatch } from 'redux';\n\nexport const mappedDispatchProps = <T>(dispatchProps: { [k in keyof T]: (...args: any) => Action }) => (\n    dispatch: Dispatch<Action>,\n) => {\n    // TODO: change 'any' in [string, any]\n    return Object.entries(dispatchProps).reduce((acc: Object, [propName, action]: [string, any]) => {\n        return {\n            ...acc,\n            [propName]: (...args: any) => {\n                return dispatch({ ...action(...args) });\n            },\n        };\n    }, {});\n};\n","import { Card, Icon } from 'antd';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { RouteComponentProps } from 'react-router';\nimport { Link } from 'react-router-dom';\nimport { DragDropBuilder } from '../../builder/components/drag-drop-builder.component';\nimport { StatusTag } from '../../common/components/status-tag/status-tag.component';\nimport { SurveyItem } from '../../common/types/survey-item.type';\nimport { Survey } from '../../common/types/survey.type';\nimport { AppState } from '../../state';\nimport { AddSurveyItemAction } from '../../state/surveys/surveys.actions';\nimport { selectCurrentSurvey } from '../../state/surveys/surveys.selectors';\nimport { mappedDispatchProps } from '../../state/utils/dispatch.util';\nimport './builder.container.less';\n\nexport interface BuilderRouteInfo {\n    surveyid: string;\n}\n\nexport interface BuilderContainerProps extends RouteComponentProps {\n    survey: Survey;\n}\n\nexport interface BuilderContainerDispatchProps {\n    onAddSurveyItem: (surveyId: string, surveyItem: SurveyItem) => void;\n}\n\nconst mapStateToProps = (\n    state: AppState,\n    props: RouteComponentProps<{ surveyid: string }>,\n): Partial<BuilderContainerProps> => ({\n    survey: selectCurrentSurvey(state, props),\n});\n\nconst mapDispatchToProps = mappedDispatchProps<BuilderContainerDispatchProps>({\n    onAddSurveyItem: (surveyId: string, surveyItem: SurveyItem) => new AddSurveyItemAction({ surveyId, surveyItem }),\n});\n\n// @ts-ignore\n@connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)\nexport class BuilderContainer extends Component<BuilderContainerProps & BuilderContainerDispatchProps> {\n    render() {\n        const { survey } = this.props;\n\n        if (!survey) {\n            return <span>Survey not found</span>;\n        }\n\n        return (\n            <>\n                <Card>\n                    <div className=\"row__title\">\n                        <Link to={`/surveys/${survey.id}`} className=\"icon--back\">\n                            <Icon type=\"left-circle\" />\n                        </Link>\n                        <h1 className=\"title\">{survey.name}</h1>\n                        <StatusTag status={survey.status} size=\"large\" extended />\n                    </div>\n                </Card>\n\n                <DragDropBuilder surveyItems={survey.items} onAddSurveyItem={this.onAddSurveyItem} />\n            </>\n        );\n    }\n\n    onAddSurveyItem = (surveyItem: SurveyItem) => {\n        const { survey } = this.props;\n        this.props.onAddSurveyItem(survey.id, surveyItem);\n    };\n}\n","import { Button } from 'antd';\nimport React, { Component } from 'react';\nimport { BlockPicker, ColorResult } from 'react-color';\n\nconst defaultColors = [\n    '#f44336',\n    '#e91e63',\n    '#9c27b0',\n    '#673ab7',\n    '#3f51b5',\n    '#2196f3',\n    '#03a9f4',\n    '#00bcd4',\n    '#009688',\n    '#4caf50',\n    '#8bc34a',\n    '#cddc39',\n    '#ffeb3b',\n    '#ffc107',\n    '#ff9800',\n    '#ff5722',\n    '#795548',\n    '#607d8b',\n];\n\n// TODO: make Colorpicker work inside a antd form\n\nexport class ColorPicker extends Component {\n    state = {\n        displayColorPicker: false,\n        color: '#2196f3',\n    };\n\n    handleClick = () => {\n        this.setState({ displayColorPicker: !this.state.displayColorPicker });\n    };\n\n    handleClose = () => {\n        this.setState({ displayColorPicker: false });\n    };\n\n    handleChange = (color: ColorResult) => {\n        this.setState({ color: color.hex });\n    };\n\n    render() {\n        return (\n            <>\n                <Button onClick={this.handleClick} style={{ position: 'relative' }}>\n                    <div\n                        style={{\n                            position: 'absolute',\n                            top: '3px',\n                            right: '3px',\n                            bottom: '3px',\n                            left: '3px',\n                            background: this.state.color,\n                        }}\n                    />\n                </Button>\n                {this.state.displayColorPicker ? (\n                    <div style={{ position: 'absolute', zIndex: 999, left: '-70px' }}>\n                        <div onClick={this.handleClose} />\n                        <BlockPicker color={this.state.color} colors={defaultColors} onChange={this.handleChange} />\n                    </div>\n                ) : null}\n            </>\n        );\n    }\n}\n","import { Button, Form, Input, Modal } from 'antd';\nimport { FormComponentProps } from 'antd/lib/form';\nimport FormItem from 'antd/lib/form/FormItem';\nimport React, { Component, FormEvent } from 'react';\nimport { FormErrors } from '../../types/forms/form-errors.type';\nimport { ValidateStatus } from '../../types/forms/validate-status.type';\nimport { ColorPicker } from '../color-picker/color-picker.component';\n\nexport interface EditSurveyDetailsFormValues {\n    name: string;\n    description: string;\n}\n\nexport interface EditSurveyDetailsModalProps {\n    onCancel: () => void;\n    values: EditSurveyDetailsFormValues;\n    onSubmit: (values: EditSurveyDetailsFormValues) => void;\n}\n\nconst mapPropsToFields = (props: EditSurveyDetailsModalProps) => {\n    const { name, description } = props.values;\n\n    return {\n        name: Form.createFormField({ value: name }),\n        description: Form.createFormField({ value: description }),\n    };\n};\n\nexport class EditSurveyDetailsModalComponent extends Component<EditSurveyDetailsModalProps & FormComponentProps> {\n    render() {\n        const { onCancel, form } = this.props;\n        const { getFieldDecorator } = form;\n\n        return (\n            <Modal\n                visible={true}\n                title=\"Edit Survey\"\n                onCancel={onCancel}\n                footer={[\n                    <Button type=\"primary\" key=\"submit\" className=\"submit-button\" onClick={this.handleSubmit}>\n                        Save\n                    </Button>,\n                ]}\n            >\n                <Form className=\"edit-survey__form\" onSubmit={this.handleSubmit}>\n                    <FormItem\n                        label=\"Name\"\n                        validateStatus={this.getValidateStatus('name')}\n                        help={this.getErrors('name') || ''}\n                    >\n                        {getFieldDecorator('name', {\n                            rules: [{ required: true, message: 'Please input a name!' }],\n                        })(<Input placeholder=\"Name\" />)}\n                    </FormItem>\n\n                    <FormItem\n                        label=\"Description\"\n                        validateStatus={this.getValidateStatus('description')}\n                        help={this.getErrors('description') || ''}\n                    >\n                        {getFieldDecorator('description', {\n                            rules: [{ required: true, message: 'Please input a description!' }],\n                        })(<Input placeholder=\"Description\" />)}\n                    </FormItem>\n\n                    <FormItem\n                        label=\"Accent color\"\n                        validateStatus={this.getValidateStatus('accentColor')}\n                        help={this.getErrors('accentColor') || ''}\n                    >\n                        {getFieldDecorator('accentColor', {\n                            rules: [],\n                        })(<ColorPicker />)}\n                    </FormItem>\n                </Form>\n            </Modal>\n        );\n    }\n\n    getErrors = (name: string): any[] => {\n        const { isFieldTouched, getFieldError } = this.props.form;\n        return isFieldTouched(name) ? getFieldError(name) : [];\n    };\n\n    getValidateStatus = (name: string): ValidateStatus => {\n        const { isFieldTouched, getFieldError } = this.props.form;\n        if (!isFieldTouched(name)) {\n            return '';\n        }\n\n        return (getFieldError(name) && getFieldError(name).length && 'error') || '';\n    };\n\n    handleSubmit = (event: FormEvent) => {\n        event.preventDefault();\n\n        this.props.form.validateFields(\n            (errors: FormErrors<EditSurveyDetailsFormValues>, values: EditSurveyDetailsFormValues) => {\n                if (!errors) {\n                    this.props.onSubmit(values);\n                }\n            },\n        );\n    };\n}\n\nexport const EditSurveyDetailsModal = Form.create<EditSurveyDetailsModalProps>({ mapPropsToFields })(\n    EditSurveyDetailsModalComponent,\n);\n","import { Button, Card } from 'antd';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect, RouteComponentProps } from 'react-router';\nimport { Link } from 'react-router-dom';\nimport { EditSurveyDetailsModal } from '../../common/components/edit-survey-details-modal/edit-survey-details-modal.component';\nimport { StatusTag } from '../../common/components/status-tag/status-tag.component';\nimport { Survey } from '../../common/types/survey.type';\nimport { AppState } from '../../state';\nimport { UpdateSurveyAction } from '../../state/surveys/surveys.actions';\nimport { selectCurrentSurvey } from '../../state/surveys/surveys.selectors';\nimport { mappedDispatchProps } from '../../state/utils/dispatch.util';\nimport './detail.container.less';\n\nexport interface DetailContainerProps {\n    survey: Survey;\n}\n\nexport interface DetailContainerDispatchProps {\n    onUpdateSurvey: (surveyId: string, changes: Partial<Survey>) => void;\n}\n\nexport interface DetailContainerState {\n    isEditModalVisible: boolean;\n}\n\nconst mapStateToProps = (\n    state: AppState,\n    props: RouteComponentProps<{ surveyid: string }>,\n): Partial<DetailContainerProps> => ({\n    survey: selectCurrentSurvey(state, props),\n});\n\nconst mapDispatchToProps = mappedDispatchProps<DetailContainerDispatchProps>({\n    onUpdateSurvey: (surveyId: string, changes: Partial<Survey>) => new UpdateSurveyAction({ surveyId, changes }),\n});\n\n// @ts-ignore\n@connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)\nexport class DetailContainer extends Component<\n    DetailContainerProps & DetailContainerDispatchProps,\n    DetailContainerState\n> {\n    state = { isEditModalVisible: false };\n\n    render() {\n        const { survey } = this.props;\n        const { isEditModalVisible } = this.state;\n\n        if (!survey) {\n            return <Redirect to=\"/404\" />;\n        }\n\n        return (\n            <>\n                <h2>\n                    {survey.name}\n                    <Button style={{ margin: '0 6px' }} shape=\"circle\" icon=\"edit\" onClick={this.toggleEditModal} />\n                </h2>\n                <Card\n                    title={\n                        <>\n                            <span style={{ marginRight: 12 }}>General</span>\n                            <StatusTag tooltipPlacement=\"right\" status={survey.status} size=\"medium\" extended />\n                        </>\n                    }\n                    extra={\n                        <>\n                            <Button>\n                                <Link to={`/builder/${survey.id}`}>Survey Builder</Link>\n                            </Button>{' '}\n                            <Button>Start surveying</Button>\n                        </>\n                    }\n                >\n                    <p>{survey.description}</p>\n\n                    <Button style={{ float: 'right' }}>See results</Button>\n                </Card>\n                {isEditModalVisible && (\n                    <EditSurveyDetailsModal\n                        onCancel={this.toggleEditModal}\n                        values={{\n                            name: survey.name,\n                            description: survey.description,\n                        }}\n                        onSubmit={this.updateSurvey}\n                    />\n                )}\n            </>\n        );\n    }\n\n    toggleEditModal = (): void => {\n        this.setState(prevState => ({ isEditModalVisible: !prevState.isEditModalVisible }));\n    };\n\n    updateSurvey = (values: { name: string; description: string }) => {\n        const surveyId = this.props.survey.id;\n        this.props.onUpdateSurvey(surveyId, values);\n        this.toggleEditModal();\n    };\n}\n","import moment from 'moment';\n\nexport const epochToLocaleString = (epoch: number): string => new Date(epoch * 1000).toLocaleString();\n\nexport const epochFromNow = (epoch: number): string => moment(epoch * 1000).fromNow();\n","export const matchesQuery = (field: string, query: string): boolean => {\n    return query ? field.toLowerCase().includes(query.toLowerCase()) : true;\n};\n","import { Button, Col, Icon, Row, Table, Tooltip } from 'antd';\nimport Search from 'antd/lib/input/Search';\nimport { RadioChangeEvent } from 'antd/lib/radio';\nimport RadioGroup from 'antd/lib/radio/group';\nimport RadioButton from 'antd/lib/radio/radioButton';\nimport React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport { mapStatusToIcon } from '../../mappers/survey-status.mapper';\nimport { SurveyStatus } from '../../types/survey-status.type';\nimport { Survey } from '../../types/survey.type';\nimport { epochFromNow } from '../../utils/date.utils';\nimport { matchesQuery } from '../../utils/string.utils';\nimport { StatusTag } from '../status-tag/status-tag.component';\nimport './survey-table.component.less';\n\nexport interface SurveyTableProps {\n    items: Survey[];\n    onChangeFilter: (status: string) => void;\n    onRowSelected: (surveyId: string) => void;\n}\n\nexport class SurveyTable extends Component<SurveyTableProps> {\n    state = {\n        query: '',\n    };\n\n    render() {\n        const { items } = this.props;\n\n        const filteredItems = items.filter(this.matchesSearchQuery);\n\n        const columns: any = [\n            {\n                title: 'Status',\n                dataIndex: 'status',\n                key: 'status',\n                align: 'center',\n                render: (status: SurveyStatus) => <StatusTag status={status} />,\n            },\n            {\n                title: 'Name',\n                dataIndex: 'name',\n                key: 'name',\n                render: (text: string) => text,\n            },\n            {\n                title: 'Created',\n                dataIndex: 'createdAt',\n                key: 'createdAt',\n                render: epochFromNow,\n            },\n            {\n                title: 'Last modified',\n                dataIndex: 'modifiedAt',\n                key: 'modifiedAt',\n                render: epochFromNow,\n            },\n        ];\n\n        return (\n            <div className=\"table-container\">\n                <div className=\"table-scroll\">\n                    <Row type=\"flex\" justify=\"space-between\">\n                        <Col>\n                            <h2>Surveys</h2>\n                        </Col>\n                        <Col>\n                            <Link to=\"/survey/new\">\n                                <Tooltip placement=\"left\" title=\"Create a new survey\">\n                                    <Button type=\"primary\">\n                                        <Icon type=\"plus\" />\n                                        New survey\n                                    </Button>\n                                </Tooltip>\n                            </Link>\n                        </Col>\n                    </Row>\n                    <Table\n                        dataSource={filteredItems}\n                        columns={columns}\n                        rowKey={survey => survey.id}\n                        bordered\n                        onRow={(survey: Survey) => ({\n                            onClick: () => this.props.onRowSelected(survey.id),\n                        })}\n                        title={() => (\n                            <Row type=\"flex\" justify=\"space-between\">\n                                <Col span={16}>\n                                    <span className=\"filterText\">Filter:</span>\n                                    <RadioGroup name=\"status-filter\" defaultValue=\"all\" onChange={this.onChangeFilter}>\n                                        <RadioButton value=\"all\">All</RadioButton>\n                                        <RadioButton value={SurveyStatus.Published}>\n                                            <Icon type={mapStatusToIcon(SurveyStatus.Published)} /> Published\n                                        </RadioButton>\n                                        <RadioButton value={SurveyStatus.InProgress}>\n                                            <Icon type={mapStatusToIcon(SurveyStatus.InProgress)} /> Drafts\n                                        </RadioButton>\n                                        <RadioButton value={SurveyStatus.Cancelled}>\n                                            <Icon type={mapStatusToIcon(SurveyStatus.Cancelled)} /> Cancelled\n                                        </RadioButton>\n                                    </RadioGroup>\n                                </Col>\n                                <Col span={8}>\n                                    <Search\n                                        placeholder=\"Search surveys...\"\n                                        onChange={e => this.setState({ query: e.target.value })}\n                                        enterButton\n                                        allowClear\n                                    />\n                                </Col>\n                            </Row>\n                        )}\n                    />\n                </div>\n            </div>\n        );\n    }\n\n    matchesSearchQuery = (survey: Survey): boolean => matchesQuery(survey.name, this.state.query);\n\n    onChangeFilter = (e: RadioChangeEvent): void => this.props.onChangeFilter(e.target.value);\n}\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { RouteComponentProps } from 'react-router';\nimport { SurveyTable } from '../../common/components/survey-table/survey-table.component';\nimport { Survey } from '../../common/types/survey.type';\nimport { AppState } from '../../state';\nimport { ChangeSurveysFilterAction } from '../../state/surveys/surveys.actions';\nimport { selectAllSurveys } from '../../state/surveys/surveys.selectors';\nimport { mappedDispatchProps } from '../../state/utils/dispatch.util';\n\nexport interface HomepageContainerProps {\n    surveys: Survey[];\n    filter: string;\n}\n\nexport interface HomepageContainerDispatchProps {\n    onChangeFilter: (e: string) => void;\n}\n\nconst mapStateToProps = (state: AppState): Partial<HomepageContainerProps> => ({\n    surveys: selectAllSurveys(state),\n    filter: state.surveysState.filter,\n});\n\nconst mapDispatchToProps = mappedDispatchProps<HomepageContainerDispatchProps>({\n    onChangeFilter: (filter: string) => new ChangeSurveysFilterAction({ filter }),\n});\n\n// @ts-ignore\n@connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)\nexport class HomepageContainer extends Component<\n    HomepageContainerProps & HomepageContainerDispatchProps & RouteComponentProps\n> {\n    render() {\n        const { surveys, filter } = this.props;\n\n        const filteredSurveys = filter === 'all' ? surveys : surveys.filter(survey => survey.status === filter);\n\n        return (\n            <SurveyTable\n                onChangeFilter={this.onChangeFilter}\n                items={filteredSurveys}\n                onRowSelected={this.onRowSelected}\n            />\n        );\n    }\n\n    onChangeFilter = (value: string): void => {\n        this.props.onChangeFilter(value);\n    };\n\n    onRowSelected = (surveyId: string) => {\n        this.props.history.push(`surveys/${surveyId}`);\n    };\n}\n","import { Icon } from 'antd';\nimport React, { Component, createRef } from 'react';\nimport { Key } from '../../types/key.type';\nimport './editable-text.component.less';\n\nexport interface EditableTextProps {\n    text: string;\n    onChange: (text: string) => void;\n    onBlur?: Function;\n    onFocus?: Function;\n}\n\nexport interface EditableTextState {\n    hasFocus: boolean;\n}\n\nexport class EditableText extends Component<EditableTextProps, EditableTextState> {\n    state = {\n        hasFocus: false,\n    };\n\n    ref = createRef<HTMLSpanElement>();\n\n    render() {\n        const { text } = this.props;\n        const { hasFocus } = this.state;\n\n        return (\n            <span className={`editable-text ${hasFocus ? 'editable-text--focused' : 'editable-text--unfocused'}`}>\n                <span\n                    onBlur={this.onBlur}\n                    onFocus={this.onFocus}\n                    onKeyDown={this.onKeyDown}\n                    contentEditable={true}\n                    suppressContentEditableWarning={true}\n                    ref={this.ref}\n                >\n                    {text}\n                </span>\n                <Icon className=\"pencil\" type=\"edit\" onClick={this.onFocus} />\n            </span>\n        );\n    }\n\n    onBlur = () => {\n        this.setState({ hasFocus: false });\n        if (this.ref.current) {\n            this.ref.current.blur();\n        }\n    };\n\n    onFocus = () => {\n        this.setState({ hasFocus: true });\n        if (this.ref.current) {\n            this.ref.current.focus();\n        }\n    };\n\n    onChange = (text: string) => {\n        this.props.onChange(text);\n        this.onBlur();\n    };\n\n    onKeyDown = (event: React.KeyboardEvent<HTMLSpanElement>) => {\n        if (event.key === Key.Enter) {\n            event.preventDefault();\n            this.onChange((event.target as HTMLSpanElement).innerHTML.trim());\n        }\n    };\n}\n","import React, { Component } from 'react';\nimport { EditableText } from '../../common/components/editable-text/editable-text.component';\n\n// This container is for messing around and trying components\nexport class SandboxContainer extends Component {\n    render() {\n        return (\n            <div style={{ display: 'flex', flexDirection: 'column' }}>\n                <EditableText onChange={this.onTitleChange} text=\"editable text\" />\n                <EditableText onChange={this.onTitleChange} text=\"also editable text\" />\n            </div>\n        );\n    }\n\n    onTitleChange = (title: string) => {\n        console.log(title);\n    };\n}\n","import { Layout } from 'antd';\nimport React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport './admin-layout.container.less';\n\nconst { Header, Footer, Content } = Layout;\n\nexport class AdminLayoutContainer extends Component {\n    render() {\n        return (\n            <Layout className=\"layout\">\n                <Header>\n                    <Link to=\"/\">\n                        <h1>Localsurvey</h1>\n                    </Link>\n                </Header>\n                <Content className=\"content--wrapper\">\n                    <div className=\"content\">{this.props.children}</div>\n                </Content>\n                <Footer>\n                    <span>Footer</span>\n                </Footer>\n            </Layout>\n        );\n    }\n}\n","import React, { Component } from 'react';\nimport { DragDropContext } from 'react-dnd';\nimport HTML5Backend from 'react-dnd-html5-backend';\nimport { Redirect, Route, Switch } from 'react-router-dom';\nimport { PageNotFound } from '../common/components/page-not-found/page-not-found.component';\nimport { BuilderContainer } from '../containers/builder/builder.container';\nimport { DetailContainer } from '../containers/detail/detail.container';\nimport { HomepageContainer } from '../containers/homepage/homepage.container';\nimport { SandboxContainer } from '../containers/sandbox/sandbox.container';\nimport { AdminLayoutContainer } from '../layout/admin/admin-layout.container';\nimport './app.container.less';\n\nexport class App extends Component {\n    render() {\n        return (\n            <AdminLayoutContainer>\n                <Switch>\n                    <Route exact path=\"/\" component={HomepageContainer} />\n                    <Route exact path=\"/sandbox\" component={SandboxContainer} />\n                    <Route exact path=\"/surveys/:surveyid\" component={DetailContainer} />\n                    <Route exact path=\"/builder/:surveyid\" component={BuilderContainer} />\n                    <Route exact path=\"/404\" component={PageNotFound} />\n                    <Redirect to=\"404\" />\n                </Switch>\n            </AdminLayoutContainer>\n        );\n    }\n}\n\nexport const AppContainer = DragDropContext(HTML5Backend)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.1/8 is considered localhost for IPv4.\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL((process as { env: { [key: string]: string } }).env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit http://bit.ly/CRA-PWA',\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See http://bit.ly/CRA-PWA.',\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log('No internet connection found. App is running in offline mode.');\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","export enum Environment {\n    Development = 'development',\n    Production = 'production',\n}\n","import { Environment } from '../types/environment.type';\n\nexport const mapStringToEnvironment = (value?: string): Environment => {\n    switch (value) {\n        case 'development':\n            return Environment.Development;\n        case 'production':\n        default:\n            return Environment.Production;\n    }\n};\n","import { DeepPartial } from 'redux';\nimport uuid from 'uuid/v4';\nimport { Environment } from '../common/types/environment.type';\nimport { SurveyStatus } from '../common/types/survey-status.type';\nimport { AppState } from './index';\n\nconst exampleDescription = `Lorem ipsum dolor sit amet, consectetur adipiscing elit. Erat enim Polemonis. Iam\ncontemni non poteris. Equidem etiam Epicurum, in physicis quidem, Democriteum puto. An quod ita callida est, ut\noptime possit architectari voluptates? Iam quae corporis sunt, ea nec auctoritatem cum animi partibus,\ncomparandam et cognitionem habent faciliorem. Duo Reges: constructio interrete. Sine ea igitur iucunde negat\nposse se vivere? Cur tantas regiones barbarorum pedibus obiit, tot maria transmisit? Bonum incolumis acies:\nmisera caecitas. Cur tantas regiones barbarorum pedibus obiit, tot maria transmisit?`;\n\n// Define a preloadedState for createStore()\n// See: https://redux.js.org/recipes/structuring-reducers/initializing-state\n\nexport const DEFAULT_STATE: { [key in Environment]: DeepPartial<AppState> } = {\n    [Environment.Production]: {\n        surveysState: {\n            surveys: [\n                {\n                    id: uuid(), // https://www.npmjs.com/package/uuid\n                    name: \"Papa John's Innately Interesting Inquiry\",\n                    description: exampleDescription,\n                    createdAt: 1542225329,\n                    modifiedAt: 1549233329,\n                    questionCount: 11,\n                    status: SurveyStatus.Published,\n                    items: [],\n                },\n            ],\n            filter: 'all',\n        },\n    },\n    [Environment.Development]: {\n        surveysState: {\n            surveys: [\n                {\n                    id: 'test', // https://www.npmjs.com/package/uuid\n                    name: \"Papa John's Innately Interesting Inquiry\",\n                    description: exampleDescription,\n                    createdAt: 1542225329,\n                    modifiedAt: 1549233329,\n                    questionCount: 11,\n                    status: SurveyStatus.Published,\n                    items: [],\n                },\n                {\n                    id: uuid(), // https://www.npmjs.com/package/uuid\n                    name: 'Zoo visit questionnaire',\n                    description: exampleDescription,\n                    createdAt: 1549238929,\n                    modifiedAt: 1549325329,\n                    questionCount: 7,\n                    status: SurveyStatus.Warning,\n                    items: [],\n                },\n                {\n                    id: uuid(),\n                    name: 'Shopping preferences survey',\n                    description: exampleDescription,\n                    createdAt: 1547049812,\n                    modifiedAt: 1547827412,\n                    questionCount: 3,\n                    status: SurveyStatus.InProgress,\n                    items: [],\n                },\n                {\n                    id: uuid(),\n                    name: \"Amy Ableton's Amazing Audit\",\n                    description: exampleDescription,\n                    createdAt: 1511049812,\n                    modifiedAt: 1522827412,\n                    questionCount: 5,\n                    status: SurveyStatus.Cancelled,\n                    items: [],\n                },\n            ],\n            filter: 'all',\n        },\n    },\n};\n","import { Survey } from '../../common/types/survey.type';\nimport { SurveysAction, SurveysActionType } from './surveys.actions';\n\nexport interface SurveysState {\n    surveys: Survey[];\n    filter: string;\n}\n\n// Providing initial state as fallback for failed hydrating from the store\n// See https://redux.js.org/recipes/structuring-reducers/initializing-state\nexport const initialSurveysState = {\n    surveys: [],\n    filter: 'all',\n};\n\nexport function surveysReducer(state: SurveysState = initialSurveysState, action: SurveysAction): SurveysState {\n    switch (action.type) {\n        case SurveysActionType.ChangeSurveysFilterAction:\n            return { ...state, filter: action.payload.filter };\n        case SurveysActionType.UpdateSurveyAction:\n            return {\n                ...state,\n                surveys: state.surveys.map(survey =>\n                    survey.id === action.payload.surveyId ? { ...survey, ...action.payload.changes } : survey,\n                ),\n            };\n\n        case SurveysActionType.AddSurveyItemAction:\n            return {\n                ...state,\n                surveys: state.surveys.map(survey =>\n                    survey.id === action.payload.surveyId\n                        ? { ...survey, items: [...survey.items, action.payload.surveyItem] }\n                        : survey,\n                ),\n            };\n        default:\n            return state;\n    }\n}\n","import { connectRouter, RouterState } from 'connected-react-router';\nimport { createBrowserHistory, History } from 'history';\nimport { combineReducers, createStore, Reducer } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { persistReducer, persistStore } from 'redux-persist';\nimport { default as autoMergeLevel1 } from 'redux-persist/es/stateReconciler/autoMergeLevel1';\nimport { default as storage } from 'redux-persist/es/storage';\nimport { mapStringToEnvironment } from '../common/mappers/environment.mapper';\nimport { Environment } from '../common/types/environment.type';\nimport { DEFAULT_STATE } from './state.constants';\nimport { surveysReducer, SurveysState } from './surveys/surveys.reducer';\n\nexport interface AppState {\n    surveysState: SurveysState;\n    router: RouterState;\n}\n\nconst persistConfig = {\n    storage,\n    key: 'root',\n    stateReconciler: autoMergeLevel1, // https://github.com/rt2zz/redux-persist#state-reconciler\n};\n\nexport const reducers = (history: History<any>): { [key in keyof AppState]: Reducer<any, any> } => ({\n    surveysState: surveysReducer,\n    router: connectRouter(history),\n});\n\nexport const history = createBrowserHistory({ basename: 'localsurvey' });\n\nconst environment: Environment = mapStringToEnvironment(process.env.NODE_ENV);\n\nconst combinedReducers = persistReducer(persistConfig, combineReducers(reducers(history)));\n\nexport const store = createStore(combinedReducers, DEFAULT_STATE[environment], composeWithDevTools());\n\nexport const persistor = persistStore(store);\n","import { Spin } from 'antd';\nimport { ConnectedRouter } from 'connected-react-router';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport { AppContainer } from './app/app.container';\nimport * as serviceWorker from './app/service-worker';\nimport { history, persistor, store } from './state';\nimport './styles/index.less';\n\nReactDOM.render(\n    <Provider store={store}>\n        {/* See: https://github.com/rt2zz/redux-persist/blob/master/docs/PersistGate.md */}\n        <PersistGate loading={<Spin size=\"large\" />} persistor={persistor}>\n            <ConnectedRouter history={history}>\n                <AppContainer />\n            </ConnectedRouter>\n        </PersistGate>\n    </Provider>,\n    document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}